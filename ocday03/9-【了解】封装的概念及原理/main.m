//
//  main.m
//  9-【了解】封装的概念及原理
//
//  Created by 高明辉 on 16/1/11.
//  Copyright © 2016年 itcast. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "Person.h"
/*
    封装的概念及原理
    1、为什么要封装
        封装就是将内部的信息进行隐藏，然后提供统一的入口给外部进行访问。减少内部属性对外部暴露的程度。
        比如人吃东西，不能把胃打开直接往里放，必须要经过嘴统一进食。因为人是一个对象，每个对象有自己的属性，需要对自己的属性进行管理和控制。谁拥有谁负责。
 
        1）将变化隔离
        2）便于使用
        3）提高重用性
        4）提高安全性
 
    2、封装的原理：
        谁拥有，谁负责。实例变量默认只能被当前的类对象方法访问。
 
    3、封装的实现步骤
        如何封装？
            给属性提供一个setter（设置器）和getter（访问器）方法。
        定义set方法的规范：
            1）方法名必须以set开头
            2）set后面加去掉下划线的实力变量名，首字母大写（驼峰命名法）
            3）返回值一定是void
            4）一定有参数，并且参数类型和对应的实例变量的类型一致
            5）形参名不能和实例变量重名，一般是将实例变量名去掉下划线做形参名（苹果官方的推荐）
            6）set方法的实现已定是给实例变量赋值。
        
        定义get方法的规范：
            1）方法名是去掉下划线的实力变量名 age
            2）必须有返回值，返回值类型和实例变量的类型一致
            3）一定没有参数
            4）get方法中，返回对应的实例变量的值。
    
    注意：
        1）在实际开发中，不一定set和get方法都会提供，比如学生的学号，是不能更改的，因此通常只提供get方法，不提供set方法。
        2）实力变量名以_开头，可以和get方法的方法名区别开来，还可以和其他的一些局部变量的变量名区分开。
 */
int main(int argc, const char * argv[]) {
    @autoreleasepool {
        Person *p = [Person new ];
//        p->_age = -10;// 无法屏蔽掉非法字符。
//        NSLog(@"人的年龄：%d",p->_age);
        
        // 通过set方法来给属性赋值。
        [p setAge:20];
//        NSLog(@"人的年龄：%d",p->_age);
        NSLog(@"人的年龄：%d",[p age]);
        
    }
    return 0;
}
